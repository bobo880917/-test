03517923630  15110343476   200992461
             persistbaby
             whlintccoc
表单编号： 100180310 100187196
**************************************************************************************************************************************
D:\workspace\.metadata\.plugins\org.eclipse.wst.server.core\tmp1\wtpwebapps\IBeacon\WEB-INF\classes\spring-hibernate.xml
有时候会部署不过去，需要手动把spring-hibernate.xml的内容加到这个地址下的文件spring-hibernate.xml上里
**************************************************************************************************************************************
 StringUtils的isBlank与isEmply
1. public static boolean isEmpty(String str) 
 
　　判断某字符串是否为空，为空的标准是 str==null 或 str.length()==0
 
　　下面是 StringUtils 判断是否为空的示例： 
 
　　StringUtils.isEmpty(null) = true
 
　　StringUtils.isEmpty("") = true
 
　　StringUtils.isEmpty(" ") = false //注意在 StringUtils 中空格作非空处理 
 
　　StringUtils.isEmpty("   ") = false
 
　　StringUtils.isEmpty("bob") = false
 
　　StringUtils.isEmpty(" bob ") = false
 
　　2. public static boolean isNotEmpty(String str) 
 
　　判断某字符串是否非空，等于 !isEmpty(String str) 
 
　　下面是示例： 
 
　　StringUtils.isNotEmpty(null) = false
 
　　StringUtils.isNotEmpty("") = false
 
　　StringUtils.isNotEmpty(" ") = true
 
　　StringUtils.isNotEmpty("         ") = true
 
　　StringUtils.isNotEmpty("bob") = true
 
　　StringUtils.isNotEmpty(" bob ") = true
 
　　3. public static boolean isBlank(String str) 
 
　　判断某字符串是否为空或长度为0或由空白符(whitespace) 构成 
 
　　下面是示例： 
 
　　StringUtils.isBlank(null) = true
 
　　StringUtils.isBlank("") = true
 
　　StringUtils.isBlank(" ") = true
 
　　StringUtils.isBlank("        ") = true
 
　　StringUtils.isBlank("\t \n \f \r") = true   //对于制表符、换行符、换页符和回车符 
 
　　StringUtils.isBlank()   //均识为空白符 
 
　　StringUtils.isBlank("\b") = false   //"\b"为单词边界符 
 
　　StringUtils.isBlank("bob") = false
 
　　StringUtils.isBlank(" bob ") = false
 
　　4. public static boolean isNotBlank(String str) 
 
　　判断某字符串是否不为空且长度不为0且不由空白符(whitespace) 构成，等于 !isBlank(String str) 
 
　　下面是示例： 
 
　　StringUtils.isNotBlank(null) = false
 
　　StringUtils.isNotBlank("") = false
 
　　StringUtils.isNotBlank(" ") = false
 
　　StringUtils.isNotBlank("         ") = false
 
　　StringUtils.isNotBlank("\t \n \f \r") = false
 
　　StringUtils.isNotBlank("\b") = true
 
　　StringUtils.isNotBlank("bob") = true
 
　　StringUtils.isNotBlank(" bob ") = true
**************************************************************************************************************************************
BusinessAction
如何使用map


@Action(value = "findById")
	public String findById() throws Exception {
		String id = getParameter("id");
		business = service.findById(Business.class, id);
		Map map = new HashMap();
		map.put("id", business.getId());		
		map.put("name", business.getName());
		map.put("province", business.getProvince());
		map.put("city", business.getCity());
		map.put("district", business.getDistrict());
		map.put("isshow", business.getIsShow());

		HttpServletResponse r = ServletActionContext.getResponse();
		r.setContentType("text/plain;charset=UTF-8");
		r.getWriter().write(JSONObject.fromObject(map).toString());
		return null;
	}

**************************************************************************************************************************************
$("#return").live('click', function(){
				window.location="${ctx}/publicAccount/index.ac"
				return false;
			});
如何返回前一个页面
**************************************************************************************************************************************
flyhir flyhir 192.168.0.199
yt yt 192.168.0.189
p2p p2p 115.29.151.232 3307
shinobi 123456zaq 192.168.0.133

服务器IP：115.29.151.232
密码：Elink2015Elink2015

svn:http://192.168.0.133:8088   chengbo  chengbo45323

http://115.29.36.39:86/bugfree

p2p用户名密码 ：admin 123514baoli

ftp://192.168.0.159

账户：ftp_admin 密码：admin2015010

ibeacon服务器密码：ryy@COM12222015
**************************************************************************************************************************************
IBeacon项目代码svn路径http://shinobipc:8088/svn/Java/IBeacon
IBeacon项目静态页面svn路径http://shinobipc:8088/svn/Java/ibeacon_html
**************************************************************************************************************************************

AdAction.java
HttpServletResponse r = ServletActionContext.getResponse();
r.setContentType( "text/plain;charset=UTF-8" );
r.getWriter().write( JSONResult.success( "操作成功" ).put("balanceMoney", balanceMoney).toString() );

BusinessAction.java
HttpServletResponse r = ServletActionContext.getResponse();
r.setContentType("text/plain;charset=UTF-8");
r.getWriter().write(JSONObject.fromObject(map).toString());
传递参数的两种方法
**************************************************************************************************************************************
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>
<fmt:formatDate value="${uuid.applyTime }" pattern="yyyy-MM-dd HH:mm:ss"/>
**************************************************************************************************************************************
adaction.java

@Action(value = "getDeviceList")
    public String getDeviceList() throws Exception {
	try {
		List<Area> provinceList = businessService.getAreaBusinessDistrictList();
		PageInfo p = adService.getDeviceList(queryProvince, queryCity, queryDistrict, business,low, high, yetai, getPageNo());
	    	    
	    PageBean page = new PageBean((int) p.getRowCount(), p.getList(), p.getPageIndex(), p.getPageSize());
	   
	    for (int i = 0; i < page.getRows().size(); i++) {
	    	Map<String , Object> param = new HashMap<String , Object>();	
	    	param = (Map<String, Object>) page.getRows().get(i);
	    	
			for (int j = 0; j < provinceList.size(); j++){
				if (param.get("province").equals(provinceList.get(j).getId())){
					param.put("province",provinceList.get(j).getName());
				}
				if (param.get("city").equals(provinceList.get(j).getId())){
					param.put("city", provinceList.get(j).getName());
				}
				if (param.get("district").equals(provinceList.get(j).getId())){
					param.put("district", provinceList.get(j).getName());
				}				
			}
		}

	    ServletActionContext.getRequest().setAttribute("page", page);
	} catch (Exception e) {
	    e.printStackTrace();
	}
**************************************************************************************************************************************
http://localhost:8087/IBeacon/shake/shake.ac?device_id=2297540&wx_id=o6Bf_ji3zpQ4zYkP8rwAcRe7eO8g&user_wxId=672&nick_name=&sex=0&head_portrait=
http://localhost:8087/IBeacon/shake/shake.ac?device_id=3015963&wx_id=o6Bf_ji3zpQ4zYkP8rwAcRe7eO8g&user_wxId=672&nick_name=&sex=0&head_portrait=
http://localhost:8087/IBeacon/shake/shake.ac?uuid=FDA50693-A4E2-4FB1-AFCF-C6EB07647825&major=10032&minor=40890&wx_id=o6Bf_ji3zpQ4zYkP8rwAcRe7eO8g&user_wxId=672&nick_name=&sex=0&head_portrait=
http://localhost:8087/IBeacon/shake/shake.ac?uuid=FDA50693-A4E2-4FB1-AFCF-C6EB07647825&major=10037&minor=32663&wx_id=o6Bf_ji3zpQ4zYkP8rwAcRe7eO8g&user_wxId=672&nick_name=&sex=0&head_portrait=
微信摇一摇本地链接
**************************************************************************************************************************************
http://www.xiaoweiwx.cn/API/IBeaconAPI/GetCardStatistics?wxid=337&startTime=20151022&endTime=20151026
查询卡券核销数    yyyyMMdd
**************************************************************************************************************************************
card_type	卡券类型。
团购券：GROUPON; 折扣券：DISCOUNT; 礼品券：GIFT; 代金券：CASH; 通用券：GENERAL_COUPON; 会员卡：MEMBER_CARD; 景点门票：SCENIC_TICKET； 电影票：MOVIE_TICKET； 飞机票：BOARDING_PASS； 会议门票：MEETING_TICKET； 汽车票：BUS_TICKET;

code_type	"CODE_TYPE_TEXT"，文本；"CODE_TYPE_BARCODE"，一维码 ；"CODE_TYPE_QRCODE"，二维码；"CODE_TYPE_ONLY_QRCODE",二维码无code显示；"CODE_TYPE_ONLY_BARCODE",一维码无code显示；

type	使用时间的类型。DATE_TYPE_FIX_TIME_RANGE 表示固定日期区间，DATE_TYPE_FIX_TERM表示固定时长（自领取后按天算），DATE_TYPE_PERMANENT 表示永久有效（会员卡类型专用）。

status	“CARD_STATUS_NOT_VERIFY”,待审核；“CARD_STATUS_VERIFY_FAIL”,审核失败；“CARD_STATUS_VERIFY_OK”，通过审核；“CARD_STATUS_USER_DELETE”，卡券被商户删除；“CARD_STATUS_DISPATCH”，在公众平台投放过的卡券
**************************************************************************************************************************************
popupbox1.bl 的几种用法
function submit(id) {
	var r = ajax({
		url : ccttxx + '/ad/submit.ac',
		data : 'entity.id=' + id
	});
	if (r.result) {
		$.popupbox1.bl("提示消息", "操作成功", "javascript:window.location.reload(true);");
		
	} else
		$.popupbox1.bl("提示消息", r.message, "javascript:$.popupbox1.close();");
}

function start(id) {
	var r = ajax({
		url : ccttxx + '/ad/start.ac',
		data : 'entity.id=' + id
	})
	if (r.result) {
		$("#advert_td_" + id).text("投放中");
		$("#advert_a_" + id).text("暂停");
		$("#advert_a_" + id).attr("href", "javascript:pause('" + id + "')");
		$.popupbox1.bl("提示消息", "操作成功", "javascript:callback()");
	} else
		alert(r.message)
}



	var r = ajax({
		url: ccttxx+'/ad/updateData.ac',
		data: data
	});
	if(r.result)
	{
		if(status == 0 || status == 2){				
			$.popupbox1.bl("提示消息", "保存成功", ccttxx + "/ad/admanage.ac");
		}else{
			$.popupbox1.bl("提示消息", "保存并提交成功", ccttxx + "/ad/admanage.ac");
		}
	}
	else
		alert("保存失败")


**************************************************************************************************************************************
public static String rightTrim(String data)
{
    if(data==null)
        return null;
     
    char[]arr=data.toCharArray();
    StringBuffer s = new StringBuffer();
    char[] newArr=new char[1];
    int pos=0;
    //worst algorithm ever. but works!
    for (int i = 0; i < arr.length; i++)
    {
        pos=(arr.length-1)-i;
//          System.out.println("pos["+pos+"] i["+i+"] ["+arr[pos]+"]");
        if(arr[pos]!=' ')
        {
            newArr= new char[pos+1];
            System.arraycopy(arr, 0, newArr, 0, pos+1);
            break;
        }
             
    }
     
    return new String(newArr);
}
**************************************************************************************************************************************
取固定字节的长度   input.jsp
<textarea type="text" id="entity.reason" cols="50" rows="3" name="entity.reason" class="required" maxlength="400" onKeyUp="checkMaxInput1(this)" onKeyDown="checkMaxInput1(this)" onkeypress="checkMaxInput1(this)"/></textarea>
<textarea type="text" id="entity.remark" cols="50" rows="3" name="entity.remark" class="required"  maxlength="400" onKeyUp="checkMaxInput2(this)" onKeyDown="checkMaxInput2(this)" onkeypress="checkMaxInput2(this)"/></textarea>

function checkMaxInput1(txt){
			txt.value = txt.value.substring(0, fucCheckLength(txt.value,200));
		}
		function checkMaxInput2(txt){
		    txt.value = txt.value.substring(0, fucCheckLength(txt.value,30));
		}
		
		function fucCheckLength(strTemp,maxlength) {
		  var i,sum;
		  sum=0;
		  count=0;
		  for(i=0;i<strTemp.length;i++) { 
		    if ((strTemp.charCodeAt(i)>=0) && (strTemp.charCodeAt(i)<=255)) {
		      sum=sum+1;
		      count=count+1;
		    }else {
		      sum=sum+2;
		      count=count+1;
	    	}
		 	if (sum == maxlength){
		 		return count; 
		 	}else{
			 	if (sum > maxlength){
			 		return count-1; 
			 	}
		 	}
		  }
		  return count; 
		}
**************************************************************************************************************************************
ad.setZcfy(zcfy.setScale(2, BigDecimal.ROUND_HALF_UP).doubleValue());
转化2位小数
**************************************************************************************************************************************
		<script language="javascript" type="text/javascript">
		  var i = 3;
		  function out(){
		    if (i>0){
		      i--;
		    }else{
		      window.history.back();
		    }
		    document.getElementById('errorDiv').innerHTML="不要着急，"+i+"秒钟后为您跳转到首页...";
		  }
		  setInterval('out()',1000);
		</script>
**************************************************************************************************************************************
/*id = $("#deviceTable :checked:eq(" + i + ")").val();*/
/*id = $("#deviceTable :checked:not(:eq(0))").val();;*/
ad_create.js
**************************************************************************************************************************************
advertiser_operator_info.jsp
	function CheckImage(FileUpload) {
        var isIE = /msie/i.test(navigator.userAgent) && !window.opera;
        var mime = FileUpload.value;
        mime = mime.toLowerCase().substr(mime.lastIndexOf("."));
        
        if (mime != null && mime != "" && mime != ".jpg" && mime != ".png" && mime != ".bmp") {
            error("仅支持JPG,PNG,BMP格式图片！");
            FileUpload.value = "";    //Clear File's value
        }else{
	        if(FileUpload.value == ""){
	        	error("图片不可为空！");
	        }
	        else{
		        alert(mime)
        		var fileSize = 0;
		        if (isIE && !target.files) {
		            var filePath = FileUpload.value;
		            var fileSystem = new ActiveXObject("Scripting.FileSystemObject");
		            var file = fileSystem.GetFile(filePath);
		            fileSize = file.Size;
		        } else {
			        fileSize = FileUpload.files[0].size;
		        }
		        var size = fileSize / 1024;
		        if (size > 1024) {
		            error("图片不能大于1M，请重新选择图片！");
		            FileUpload.value = "";    //Clear File's value
		        }
	        }
        }
       
    }
**************************************************************************************************************************************
 var Wi = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2, 1];    // 加权因子   
    var ValideCode = [1, 0, 10, 9, 8, 7, 6, 5, 4, 3, 2];            // 身份证验证位值.10代表X   
    function IdCardValidate(idCard) {
        idCard = trim(idCard.replace(/ /g, ""));               //去掉字符串头尾空格                     
        if (idCard.length == 15) {
            return isValidityBrithBy15IdCard(idCard);       //进行15位身份证的验证    
        } else if (idCard.length == 18) {
            var a_idCard = idCard.split("");                // 得到身份证数组   
            if (isValidityBrithBy18IdCard(idCard) && isTrueValidateCodeBy18IdCard(a_idCard)) {   //进行18位身份证的基本验证和第18位的验证
                return true;
            } else {
                return false;
            }
        } else {
            return false;
        }
    }
     @* 判断身份证号码为18位时最后的验证位是否正确  
      @param a_idCard 身份证号码数组  *@

    function isTrueValidateCodeBy18IdCard(a_idCard) {
        var sum = 0;                             // 声明加权求和变量   
        if (a_idCard[17].toLowerCase() == 'x') {
            a_idCard[17] = 10;                    // 将最后位为x的验证码替换为10方便后续操作   
        }
        for (var i = 0; i < 17; i++) {
            sum += Wi[i] * a_idCard[i];            // 加权求和   
        }
        valCodePosition = sum % 11;                // 得到验证码所位置   
        if (a_idCard[17] == ValideCode[valCodePosition]) {
            return true;
        } else {
            return false;
        }
    }
  @*   
      验证18位数身份证号码中的生日是否是有效生日  
      @param idCard 18位书身份证字符串  
   @return  
    *@
    function isValidityBrithBy18IdCard(idCard18) {
        var year = idCard18.substring(6, 10);
        var month = idCard18.substring(10, 12);
        var day = idCard18.substring(12, 14);
        var temp_date = new Date(year, parseFloat(month) - 1, parseFloat(day));
        // 这里用getFullYear()获取年份，避免千年虫问题   
        if (temp_date.getFullYear() != parseFloat(year)
              || temp_date.getMonth() != parseFloat(month) - 1
              || temp_date.getDate() != parseFloat(day)) {
            return false;
        } else {
            return true;
        }
    }
    @*    
     验证15位数身份证号码中的生日是否是有效生日  
     @param idCard15 15位书身份证字符串  
    @return  
    *@
    function isValidityBrithBy15IdCard(idCard15) {
        var year = idCard15.substring(6, 8);
        var month = idCard15.substring(8, 10);
        var day = idCard15.substring(10, 12);
        var temp_date = new Date(year, parseFloat(month) - 1, parseFloat(day));
        // 对于老身份证中的你年龄则不需考虑千年虫问题而使用getYear()方法   
        if (temp_date.getYear() != parseFloat(year)
                || temp_date.getMonth() != parseFloat(month) - 1
                || temp_date.getDate() != parseFloat(day)) {
            return false;
        } else {
            return true;
        }
    }
    //去掉字符串头尾空格   
    function trim(str) {
        return str.replace(/(^\s*)|(\s*$)/g, "");
    }

  @*   
  通过身份证判断是男是女  
 @param idCard 15/18位身份证号码   
 @return  
   *@
    function maleOrFemalByIdCard(idCard) {
        idCard = trim(idCard.replace(/ /g, ""));        // 对身份证号码做处理。包括字符间有空格。   
        if (idCard.length == 15) {
            if (idCard.substring(14, 15) % 2 == 0) {
                return '女';
            } else {
                return '男';
            }
        } else if (idCard.length == 18) {
            if (idCard.substring(14, 17) % 2 == 0) {
                return '女';
            } else {
                return '男';
            }
        } else {
            return null;
        }
    }

**************************************************************************************************************************************
Hibernate的generator属性之意义
2009-06-29 08:58 佚名 百度博客 字号：T | T
一键收藏，随时查看，分享好友！

本文讲述Hibernate的generator属性的意义。Generator属性有7种class，本文简略描述了这7种class的意义和用法。

AD：

Hibernate的Generator属性有7种class，本文简略描述了这7种class的意义和用法。

1、identity：用于MySql数据库。特点：递增 

    < id name="id" column="id">   
        < generator class="identity"/>   
    < /id> 

注：对于MySql数据库使用递增序列时需要在建表时对主键指定为auto_increment属性。

2、sequence：用于Oracle数据库 

    < id name="id" column="id">   
       < generator class="sequence">   
         < param name="sequence">序列名< /param>   
       < /generator>   
    < /id> 

3、native：跨数据库时使用，由底层方言产生。
Default.sequence为hibernate_sequence

    < id name="id" column="id">   
       < generator class="native"/>   
    < /id>   

注：使用native时Hibernate默认会去查找Oracle中的hibernate_sequence序列。
如果Oracle中没有该序列，连Oracle数据库时会报错。

4、hilo：通过高低位合成id，先建表hi_value，再建列next_value。必须要有初始值。

    < id name="id" column="id">   
        < generator class="hilo">   
          < param name="table">high_val< /param>   
           < param name="column">nextval< /param>   
          < param name="max_lo">5< /param>   
        < /generator>   
    < /id>  

5、sequencehilo：同过高低位合成id，建一个sequence序列，不用建表。 

    < id name="id" column="id">   
    < generator class="hilo">   
    < param name="sequence">high_val_seq< /param>   
    < param name="max_lo">5< /param>   
    < /generator>   
    < /id> 

6、assigned：用户自定义id; 

    < id name="id" column="id">   
    < generator class="assigned"/>   
    < /id> 

7、foreign：用于一对一关系共享主健时，两id值一样。
**************************************************************************************************************************************
localhost:8087/epay/trade_createOrder.ac?subOrderNum=001&subSystemCode=1&orderNum=&price=120&productNames=123456&payCode=001&merchantCode=002&merchantName=张三&Product_Counts=200&orderTime=2015-01-01&redictUrl=http://192.168.0.23:8382/wefwe/sdf
**************************************************************************************************************************************
常用的两个设备
0117C555FD2B
0117C55C11CE
**************************************************************************************************************************************
spring-hibernate.xml
	<!-- HibernateTemplate -->
	<bean id="ht" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
**************************************************************************************************************************************

		<p:selectCheckboxMenu id="terms" label="#{nodeMsg.categoryTermsLabel}" filter="true" filterMatchMode="contains"
			collectionType="java.util.ArrayList"
			value="#{instance.categoryTerms}" converter="archer.EntityConverter">
			<p:ajax event="change" update="termSelects" />
			<f:selectItems value="#{categoryTermList.allResultList}" var="term"
				itemValue="#{term}" itemLabel="#{term.name}" />
		</p:selectCheckboxMenu>


	<h:selectManyCheckbox value="#{instance.nodeAttrs}"
		collectionType="java.util.ArrayList" label="#{nodeMsg.nodeAttrsLabel}"
		converter="archer.EntityConverter">
		<f:selectItems value="#{nodeAttrList.allResultList}" var="nodeAttr"
			itemValue="#{nodeAttr}" itemLabel="#{nodeAttr.name}" />
	</h:selectManyCheckbox>

	<h:selectManyCheckbox value="#{instance.nodeAttrs}"
		collectionType="java.util.ArrayList" label="#{nodeMsg.nodeAttrsLabel}"
		converter="archer.EntityConverter">
		<f:selectItems value="#{nodeAttrList.allResultList}" var="nodeAttr"
			itemValue="#{nodeAttr}" itemLabel="#{nodeAttr.name}" />
	</h:selectManyCheckbox>
**************************************************************************************************************************************
**************************************************************************************************************************************
**************************************************************************************************************************************
**************************************************************************************************************************************
